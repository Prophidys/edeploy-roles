---
# file: roles/controller/tasks/main.yml

# Stop Services
- name: stop services before upgrade
  service: name={{ item }} state=stopped
  with_items:
    - ceilometer-alarm-evaluator
    - ceilometer-alarm-notifier
    - ceilometer-api
    - ceilometer-collector
    - cinder-api
    - cinder-backup
    - cinder-scheduler
    - cinder-volume
    - glance-api
    - glance-registry
    - heat-api
    - heat-api-cfn
    - heat-api-cloudwatch
    - keystone
    - neutron-server
    - nova-api
    - nova-cert
    - nova-conductor
    - nova-consoleauth
    - nova-scheduler
    - nova-spicehtml5proxy
    - apache2
  tags: before_config

# Upgrade packages to Icehouse
- name: edeploy upgrade
  edeploy: command=upgrade version=D7-{{ version }}
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: edeploy upgrade
  edeploy: command=upgrade version=U14.04-{{ version }}
  tags: before_config
  when: ansible_distribution == 'Ubuntu'

- name: Restart the server
  shell: sleep 2s && reboot & executable=/bin/bash

- name: Wait until the machine stop
  local_action: wait_for host={{ansible_ssh_host}} port={{ansible_ssh_port}} state=stopped
  sudo: false

- name: Wait for server to come up
  local_action: wait_for host={{ansible_ssh_host}} port={{ansible_ssh_port}} delay=60
  sudo: false

# Prepare Keystone database
# In Icehouse, we need to ensure tables are in UTF8 encoding format.
- name: migrate keystone DB to UTF8
  script: keystone.sh
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

# Prepare Glance database
# In Icehouse, we need to ensure tables are in UTF8 encoding format.
- name: migrate Glance DB to UTF8
  script: glance.sh
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

# Start Services
- name: start services after upgrade
  service: name={{ item }} state=started
  with_items:
    - ceilometer-alarm-evaluator
    - ceilometer-alarm-notifier
    - ceilometer-api
    - ceilometer-collector
    - cinder-api
    - cinder-backup
    - cinder-scheduler
    - cinder-volume
    - glance-api
    - glance-registry
    - heat-api
    - heat-api-cfn
    - heat-api-cloudwatch
    - keystone
    - neutron-server
    - nova-api
    - nova-cert
    - nova-conductor
    - nova-consoleauth
    - nova-scheduler
    - nova-spicehtml5proxy
    - apache2
  tags: before_config

# Upgrade OpenStack Databases
- name: update keystone database
  command: keystone-manage db_sync
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

- name: update glance database
  command: glance-manage db_sync
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

- name: update cinder database
  command: cinder-manage db sync
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

- name: update nova database
  command: cinder-manage db sync
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

- name: update neutron database
  command: neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

- name: update heat database
  command: heat-manage --config-file /etc/heat/heat.conf db_sync
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]

# After Databases updates, we restart the services.
# Since we do serialization, we don't need to restart services on other nodes.
# They will be started after eDeploy upgrade.
- name: restart some services after database update
  service: name={{ item }} state=started
  with_items:
    - ceilometer-alarm-evaluator
    - ceilometer-alarm-notifier
    - ceilometer-api
    - ceilometer-collector
    - cinder-api
    - cinder-backup
    - cinder-scheduler
    - cinder-volume
    - glance-api
    - glance-registry
    - heat-api
    - heat-api-cfn
    - heat-api-cloudwatch
    - keystone
    - neutron-server
    - nova-api
    - nova-cert
    - nova-conductor
    - nova-scheduler
  tags: before_config
  when: inventory_hostname == groups['controllers'][0]
