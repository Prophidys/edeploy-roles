---
# file: roles/openstack-full/tasks/main.yml

# Mark the nova-compute service as disabled to prevent Nova from scheduling
# any new servers on this node
- name: disable nova-compute to prevent instance scheduling
  command: nova --os-auth-url {{ os_auth_url }} --os-tenant-name admin --os-username {{ os_username }} --os-password {{ os_password }} service-disable --reason upgrade {{ ansible_fqdn }} nova-compute
  tags: before_config

- name: stop HAproxy service
  service: name=haproxy state=stopped
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: stop openstack services
  service: name={{ item }} state=stopped
  with_items:
    - "{{ ceilometer_agent_compute }}"
    - "{{ ceilometer_agent_notification }}"
    - "{{ ceilometer_alarm_evaluator }}"
    - "{{ ceilometer_alarm_notifier }}"
    - "{{ ceilometer_api }}"
    - "{{ ceilometer_collector }}"
    - "{{ cinder_api }}"
    - "{{ cinder_scheduler }}"
    - "{{ cinder_volume }}"
    - "{{ glance_api }}"
    - "{{ glance_registry }}"
    - "{{ heat_api }}"
    - "{{ heat_api_cfn }}"
    - "{{ heat_api_cloudwatch }}"
    - "{{ heat_engine }}"
    - "{{ keystone }}"
    - "{{ neutron_dhcp_agent }}"
    - "{{ neutron_l3_agent }}"
    - "{{ neutron_lbaas_agent }}"
    - "{{ neutron_metadata_agent }}"
    - "{{ neutron_metering_agent }}"
    - "{{ neutron_openvswitch_agent }}"
    - "{{ neutron_server }}"
    - "{{ nova_api }}"
    - "{{ nova_cert }}"
    - "{{ nova_compute }}"
    - "{{ nova_conductor }}"
    - "{{ nova_consoleauth }}"
    - "{{ nova_scheduler }}"
    - "{{ nova_spicehtml5proxy }}"
    - "{{ swift_account }}"
    - "{{ swift_container }}"
    - "{{ swift_object }}"
    - "{{ swift_proxy }}"
    - "{{ webserver }}"
  tags: before_config

# RabbitMQ and MongoDB are upgraded in RHEL7
- name: stop rabbitmq and mongodb
  service: name={{ item }} state=stopped
  with_items:
    - rabbitmq-server
    - mongod
  tags: before_config
  when: ansible_distribution == 'RedHat'

# MySQL is upgraded in RHEL7
# since we don't know if the node is master or not, we stop mysql anyway
- name: stop mysql
  service: name={{ item }} state=stopped
  with_items:
    - mysqld
    - mysql-boostrap
  tags: before_config
  ignore_errors: yes
  when: ansible_distribution == 'RedHat'

- name: stop Ceph services
  service: name=ceph state=stopped
  tags: before_config
  when: ansible_distribution == 'RedHat'

- name: stop openvswitch service
  service: name=openvswitch-switch state=stopped
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: edeploy upgrade
  edeploy: command=upgrade version={{ distro }}-{{ version }}
  tags: before_config

- name: start openvswitch service
  service: name=openvswitch-switch state=started
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: start Ceph services
  service: name=ceph state=started
  tags: before_config
  when: ansible_distribution == 'RedHat'

- name: start rabbitmq
  service: name=rabbitmq-server state=started
  tags: before_config
  when: ansible_distribution == 'RedHat' and inventory_hostname == groups['openstack-full'][-1]

- name: bootstrap mysql cluster again
  service: name=mysql-bootstrap state=restarted
  tags: before_config
  when: ansible_distribution == 'RedHat' and inventory_hostname == groups['openstack-full'][-1]

# HAproxy has been updated on Debian
# from 1.5.4-1 to 1.5.8-2
- name: start HAproxy service
  service: name=haproxy state=started
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: start mongodb
  service: name=mongod state=started
  tags: before_config
  when: ansible_distribution == 'RedHat'

- name: purge keystone old tokens
  command: keystone-manage token_flush
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: update keystone database
  command: keystone-manage db_sync
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: start keystone service
  service: name={{ keystone }} state=started
  tags: before_config

- name: start swift services
  service: name={{ item }} state=started
  with_items:
    - "{{ swift_account }}"
    - "{{ swift_container }}"
    - "{{ swift_object }}"
    - "{{ swift_proxy }}"
  tags: before_config

- name: update glance database
  command: glance-manage db_sync
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: start glance services
  service: name={{ item }} state=started
  with_items:
    - "{{ glance_api }}"
    - "{{ glance_registry }}"
  tags: before_config

- name: update cinder database
  command: cinder-manage db sync
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: start cinder services
  service: name={{ item }} state=started
  with_items:
    - "{{ cinder_api }}"
    - "{{ cinder_scheduler }}"
    - "{{ cinder_volume }}"
  tags: before_config

- name: update neutron database
  command: neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: start neutron services
  service: name={{ item }} state=started
  with_items:
    - "{{ neutron_server }}"
    - "{{ neutron_dhcp_agent }}"
    - "{{ neutron_l3_agent }}"
    - "{{ neutron_lbaas_agent }}"
    - "{{ neutron_metadata_agent }}"
    - "{{ neutron_metering_agent }}"
    - "{{ neutron_openvswitch_agent }}"
  tags: before_config

- name: update heat database
  command: heat-manage --config-file /etc/heat/heat.conf db_sync
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][0]

- name: start heat services
  service: name={{ item }} state=started
  with_items:
    - "{{ heat_api }}"
    - "{{ heat_api_cfn }}"
    - "{{ heat_api_cloudwatch }}"
    - "{{ heat_engine }}"
  tags: before_config

- name: start ceilometer services
  service: name={{ item }} state=started
  with_items:
    - "{{ ceilometer_agent_compute }}"
    - "{{ ceilometer_agent_notification }}"
    - "{{ ceilometer_alarm_evaluator }}"
    - "{{ ceilometer_alarm_notifier }}"
    - "{{ ceilometer_api }}"
    - "{{ ceilometer_collector }}"
  tags: before_config

- name: restart ceilometer-agent-central managed by pacemaker
  command: crm resource cleanup ceilometer-agent-central
  tags: before_config
  when: ansible_distribution == 'Debian' and inventory_hostname == groups['openstack-full'][-1]

- name: restart ceilometer-agent-central managed by pacemaker
  command: pcs resource cleanup ceilometer-agent-central
  tags: before_config
  when: ansible_distribution == 'RedHat' and inventory_hostname == groups['openstack-full'][-1]

- name: prepare horizon django files
  command: /usr/share/openstack-dashboard/manage.py compress
  tags: before_config
  when: ansible_distribution == 'RedHat'

- name: prepare horizon django files
  command: /usr/bin/pycompile -p python-django-horizon
  tags: before_config
  when: ansible_distribution == 'Debian'

- name: start apache2 service
  service: name={{ webserver }} state=started
  tags: before_config

- name: update nova database
  command: nova-manage db sync
  tags: before_config
  when: inventory_hostname == groups['openstack-full'][-1]

# Cap the compute RPC API at a version that will still be understood by your Icehouse compute nodes
- ini_file: dest=/etc/nova.conf
            section=upgrade_levels
            option=compute
            value=icehouse
  tags: before_config

# we don't restart nova-spicehtml5 because it's dropped in J.1.0.0
- name: start nova services
  service: name={{ item }} state=started
  with_items:
    - "{{ nova_api }}"
    - "{{ nova_cert }}"
    - "{{ nova_compute }}"
    - "{{ nova_conductor }}"
    - "{{ nova_consoleauth }}"
    - "{{ nova_scheduler }}"
  tags: before_config

- name: allow instance scheduling on the compute node
  command: nova --os-auth-url {{ os_auth_url }} --os-tenant-name admin --os-tenant-name admin--os-username {{ os_username }} --os-password {{ os_password }} service-enable {{ ansible_fqdn }} nova-compute
  tags: before_config

# Clean-up nova config by deleting the option, not useful anymore
- ini_file: dest=/etc/nova.conf
            section=upgrade_levels
            option=compute
  tags: after_config

- name: restart nova services
  service: name={{ item }} state=restarted
  with_items:
    - "{{ nova_api }}"
    - "{{ nova_cert }}"
    - "{{ nova_compute }}"
    - "{{ nova_conductor }}"
    - "{{ nova_consoleauth }}"
    - "{{ nova_scheduler }}"
  tags: after_config
